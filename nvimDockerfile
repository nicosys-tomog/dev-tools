# syntax=docker/dockerfile:1.3-labs
FROM ubuntu:22.04

WORKDIR /root

RUN  apt update \
  && apt install -y make g++ curl git software-properties-common \
                       \
                    # for telescope.vim
                    ripgrep fd-find \
     \
  # add apt repositories
  && add-apt-repository ppa:neovim-ppa/stable \
  && curl -fsSL https://deb.nodesource.com/setup_16.x | bash - \
     \
  # install neovim and node.js 16.x and lua
  && apt install -y neovim nodejs lua5.4 \
     \
  # download vim plugin
  && curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
     \
  && npm install -g tree-sitter-cli \
  # apt cache clean up
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

RUN <<EOR
mkdir -p ~/.vim/after/ && mkdir -p ~/.config/nvim/plug/

cat<<EOI > ~/.config/nvim/init.vim
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath

call plug#begin()
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'nvim-lualine/lualine.nvim'
Plug 'phaazon/hop.nvim'
Plug 'norcalli/nvim-colorizer.lua'

Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' }
call plug#end()

source ~/.config/nvim/plug/coc.vim
source ~/.config/nvim/plug/hop.vim
source ~/.config/nvim/plug/nvim-treesitter.vim
source ~/.config/nvim/plug/lualine.vim
source ~/.config/nvim/plug/nvim-colorizer.vim
source ~/.config/nvim/plug/telescope.vim
source ~/.config/nvim/option.vim
source ~/.vimrc
EOI

cat<<EOO > ~/.config/nvim/option.vim
" Disable TOhtml.
let g:loaded_2html_plugin       = 1

" Disable archive file open and browse.
let g:loaded_gzip               = 1
let g:loaded_tar                = 1
let g:loaded_tarPlugin          = 1
let g:loaded_zip                = 1
let g:loaded_zipPlugin          = 1

" Disable vimball.
let g:loaded_vimball            = 1
let g:loaded_vimballPlugin      = 1

" Disable netrw plugins.
let g:loaded_netrw              = 1
let g:loaded_netrwPlugin        = 1
let g:loaded_netrwSettings      = 1
let g:loaded_netrwFileHandlers  = 1

" Disable `GetLatestVimScript`.
let g:loaded_getscript          = 1
let g:loaded_getscriptPlugin    = 1

" Disable other plugins
let g:loaded_man                = 1
let g:loaded_matchit            = 1
let g:loaded_matchparen         = 1
let g:loaded_shada_plugin       = 1
let g:loaded_spellfile_plugin   = 1
let g:loaded_tutor_mode_plugin  = 1
let g:did_install_default_menus = 1
let g:did_install_syntax_menu   = 1
let g:skip_loading_mswin        = 1
let g:did_indent_on             = 1
let g:did_load_filetypes        = 1
let g:did_load_ftplugin         = 1
let g:loaded_rrhelper           = 1
EOO

cat<<EOV > ~/.vimrc
set nu
set listchars=trail:-,eol:$,extends:>,precedes:<,nbsp:%
set list
set tabstop=4
set expandtab
EOV

cat<<EOV > ~/.config/nvim/plug/coc.vim
autocmd FileType json syntax match Comment +\/\/.\+$+
let g:coc_global_extensions = [
\  'coc-json',
\  'coc-css',
\  'coc-html',
\  'coc-eslint',
\  'coc-tsserver',
\  'coc-vetur',
\  'coc-markdownlint',
\]
" Note: coc-vetur need eslint and eslint-plugin-vue install by
" npm i eslint eslint-plugin-vue -D

"# install coc-json & coc-html and exit
"vim -c 'CocInstall -sync coc-json coc-html|q'

"use <CR> to confirm completion
inoremap <expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>" 
"use <tab> for trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

highlight CocErrorSign ctermfg=15 ctermbg=196
highlight CocWarningSign ctermfg=0 ctermbg=172

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
EOV

cat<<EOV > ~/.config/nvim/plug/hop.vim
lua require('hop').setup()
nmap <silent> hh :HopWord<CR>
EOV

cat<<EOV > ~/.config/nvim/plug/telescope.vim
lua require "plenary.async" 
lua require('telescope').setup()
lua require('telescope').load_extension('fzf')

" Using Lua functions " 
nnoremap ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap fb <cmd>lua require('telescope.builtin').buffers()<cr>

nnoremap gs <cmd>lua require('telescope.builtin').git_status()<cr>
nnoremap gb <cmd>lua require('telescope.builtin').git_branches()<cr>
nnoremap ts <cmd>lua require('telescope.builtin').treesitter()<cr>
EOV

cat<<EOV > ~/.config/nvim/plug/nvim-treesitter.vim
lua << EOVL
require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all" 
  ensure_installed = { "json", "toml", "yaml",
                       "html", "css", "scss",
                       "sql",
                       "pug",
                       "vue",
                       "typescript" 
  },

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- Automatically install missing parsers when entering buffer
  auto_install = true,

  highlight = {
    enable = true,
    additional_vim_regex_highlighting = false,
  },
}
EOVL
EOV

cat<<EOV > ~/.config/nvim/plug/lualine.vim
lua require('lualine').setup()
EOV

cat<<EOV > ~/.config/nvim/plug/nvim-colorizer.vim
set termguicolors
lua require('colorizer').setup()
EOV

EOR

CMD [ "/usr/bin/bash" ]
